"use strict";(self.webpackChunkjavascript=self.webpackChunkjavascript||[]).push([["4051"],{1365:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>i,toc:()=>c,default:()=>h,metadata:()=>s,assets:()=>l,contentTitle:()=>o});var s=JSON.parse('{"id":"basics/setup","title":"Tools for Javascript development","description":"In order to run Javascript all you need any modern browser, and a text editor to","source":"@site/docs/basics/setup.md","sourceDirName":"basics","slug":"/basics/setup","permalink":"/javascript/basics/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/javascript/blob/main/docs/basics/setup.md","tags":[],"version":"current","frontMatter":{"title":"Tools for Javascript development","sidebar_label":"Setup"},"sidebar":"docs","previous":{"title":"Basics","permalink":"/javascript/category/basics"},"next":{"title":"Variables","permalink":"/javascript/basics/variables"}}'),r=t(4848),a=t(4429);let i={title:"Tools for Javascript development",sidebar_label:"Setup"},o=void 0,l={},c=[{value:"Browser console",id:"browser-console",level:2},{value:"Linking external script files",id:"linking-external-script-files",level:2}];function d(e){let n={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In order to run Javascript all you need any modern browser, and a text editor to\nwrite your codes. I am using Visual Studio Code text editor and Safari browser.\nYou can pick any of your choice."}),"\n",(0,r.jsxs)(n.p,{children:["Just load an empty ",(0,r.jsx)(n.code,{children:"index.html"})," file in your browser. Click anywhere on the\nviewport, and choose Inspect element. There you will find a browser console.\nThat's where we will be working. We can also link a ",(0,r.jsx)(n.code,{children:"script.js"})," file and write\nour javascript on a separate file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<!DOCTYPE html>\n<head>\n    <title>Empty page for Javascript development. </title>\n</head>\n\n<body>\n</body>\n\n<script src="script.js"><\/script>\n</html>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"browser-console",children:"Browser console"}),"\n",(0,r.jsxs)(n.p,{children:["Once you are on the browser console, you will see a sort of terminal with ",(0,r.jsx)(n.strong,{children:">"}),"\nprompt waiting for you to type commands."]}),"\n",(0,r.jsx)(n.p,{children:'First of all, we can print something like "Hello, world!". One way is to issue a\nbrowser alert.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'> alert("Hello Javascript!")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Press ",(0,r.jsx)(n.strong,{children:"return"}),' and you will see a browser alert saying "Hello Javascript". You\nhave to click close or Ok to dismiss the alert. This could be bit annoying, so\nwe will directly print in our console:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'> console.log("Hello Javascript!")\n\nHello Javascript!\n'})}),"\n",(0,r.jsx)(n.p,{children:"We can do some basic math as well."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"> console.log(3 + 5.6)\n\n8.6\n"})}),"\n",(0,r.jsx)(n.p,{children:"We can assign some variables as well, and operate on them."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'> let name = "Pranab"\n  console.log(name)\n\nPranab\n\n> let x = 7;\n  let y = 4;\n  let mult = x*y;\n  console.log(mult)\n\n28\n'})}),"\n",(0,r.jsx)(n.p,{children:"You get the idea. Note that it is not necessary to end a line in Javascript with\nsemicolon, this is just my personal preference for better code readability."}),"\n",(0,r.jsx)(n.p,{children:"We can do something bit more advanced like getting printing the date:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"> let date = new Date();\n  console.log(date)\n\nWed Apr 22 2020 13:18:27 GMT+0800 (+08)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We assigned our date variable a new object called ",(0,r.jsx)(n.code,{children:"Date()"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Now what if we want to print something on the browser viewport? For that we need\nto understand the structure of our html page. We have an html page with empty\nbody. We will inject something on the body."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'document.body.innerHTML = "<p> Today is: " + date + "</p>"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now you see the paragraph with date appearing in our html viewport. However, the\ndate object is bit messy. We can clean it up using some methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'document.body.innerHTML = "<p> Today is : " + date.getDate() + "/" + date.getMonth() + "/" + date.getFullYear() + ".</p>"\n'})}),"\n",(0,r.jsx)(n.p,{children:"However, you will notice one wired thing. The month is previous month. Here the\nmonth count starts from 0 (but not the date and Year though), wo we need to add\n1 to the month to get correct month."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'document.body.innerHTML = "<p> Today is : " + date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear() + ".</p>"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Note that whatever we are doing in the console are not saved anywhere. So we\nreload the page, everything will be gone. Console is the playground for you to\ntest your Javascript."}),"\n",(0,r.jsx)(n.p,{children:"We can preserve our Javascript code by putting it inline with the html page or\nwriting the javascript in a separate file, and loading the file with the html."}),"\n",(0,r.jsxs)(n.p,{children:["We can write javascript inline with html within the ",(0,r.jsx)(n.code,{children:"<script><\/script>"})," tags."]}),"\n",(0,r.jsx)(n.h2,{id:"linking-external-script-files",children:"Linking external script files"}),"\n",(0,r.jsxs)(n.p,{children:["Here we will write our javascript in a separate file called ",(0,r.jsx)(n.em,{children:"script.js"}),". We will\nadd the script tag after the body element."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'<script src="script.js"><\/script>\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now we can write our code in the file script.js and reload the index.html to see\nour changes."}),"\n",(0,r.jsxs)(n.p,{children:["Note that if we put the script tag in the head, we need to include ",(0,r.jsx)(n.code,{children:"defer"})," or\n",(0,r.jsx)(n.code,{children:"async"})," attribute, otherwise it will run into problem of finding the body\nelement before it is created."]})]})}function h(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},4429:function(e,n,t){t.d(n,{R:()=>i,x:()=>o});var s=t(6540);let r={},a=s.createContext(r);function i(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);