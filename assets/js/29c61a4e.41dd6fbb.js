"use strict";(self.webpackChunkjavascript=self.webpackChunkjavascript||[]).push([[512],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7491:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],s={title:"Introduction to Node.js",sidebar_label:"Node.js"},i=void 0,p={unversionedId:"node/node",id:"node/node",title:"Introduction to Node.js",description:"For this lesson, you must have Node.js installed. We will write our codes in",source:"@site/docs/node/node.md",sourceDirName:"node",slug:"/node/",permalink:"/javascript/node/",draft:!1,editUrl:"https://github.com/pranabdas/javascript/blob/main/docs/node/node.md",tags:[],version:"current",frontMatter:{title:"Introduction to Node.js",sidebar_label:"Node.js"},sidebar:"docs",previous:{title:"Node",permalink:"/javascript/category/node"},next:{title:"Standar I/O",permalink:"/javascript/node/io"}},c={},u=[],d={toc:u},m="wrapper";function g(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"For this lesson, you must have ",(0,o.kt)("strong",{parentName:"p"},"Node.js")," installed. We will write our codes in\na file called ",(0,o.kt)("inlineCode",{parentName:"p"},"intro.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'console.log("Hello Node.js!")\n')),(0,o.kt)("p",null,"Now we can run the javascript by typing the following in the terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$ node intro.js\n\nHello Node.js!\n")),(0,o.kt)("p",null,"Next, let's define a variable and print that out."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let message = "Hello world from the Node.js";\n\nconsole.log(message);\n')),(0,o.kt)("p",null,"Note that you can omit the ",(0,o.kt)("inlineCode",{parentName:"p"},".js")," from the filename when running ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"node intro\n\nHello world from the Node.js\n")),(0,o.kt)("p",null,"Here the ",(0,o.kt)("inlineCode",{parentName:"p"},"console")," is a global variable and it is available to us without\nimporting or requiring any ",(0,o.kt)("inlineCode",{parentName:"p"},"class"),". There are several other global variables\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},"__dirname")," or `",(0,o.kt)("inlineCode",{parentName:"p"},"__filename")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"console.log(__dirname);\nconsole.log(__filename);\n\n/Users/Pranab/Documents/github/js-learning/src/node\n/Users/Pranab/Documents/github/js-learning/src/node/intro.js\n")),(0,o.kt)("p",null,"We can import external modules by using ",(0,o.kt)("inlineCode",{parentName:"p"},"require"),". Let's say we import the\n",(0,o.kt)("inlineCode",{parentName:"p"},"path")," module which ships with the Node.js ans load that into a variable called\n",(0,o.kt)("inlineCode",{parentName:"p"},"path"),". Then we try to extract just the filename using a path method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const  path = require('path');\nconsole.log(`The file name is : ${path.basename(__filename)}`);\n\nThe file name is : intro.js\n")),(0,o.kt)("p",null,"Note that for template strings back tics are used instead of single/double\nquotes."),(0,o.kt)("p",null,"Another important global object is ",(0,o.kt)("inlineCode",{parentName:"p"},"process"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"console.log(process.pid);\nconsole.log(process.versions.node);\n\n89046\n12.16.2\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"process.argv")," to pass arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"console.log(process.argv);\n\n[\n  '/usr/local/bin/node',\n  '/Users/Pranab/Documents/github/js-learning/src/node/intro'\n]\n")),(0,o.kt)("p",null,"So when we run our program by typing ",(0,o.kt)("inlineCode",{parentName:"p"},"node intro"),", we are simply passing an\narray. We can pass more variables:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"node intro hello \"pranab das\"\n\n[\n  '/usr/local/bin/node',\n  '/Users/Pranab/Documents/github/js-learning/src/node/intro',\n  'hello',\n  'pranab das'\n]\n")),(0,o.kt)("p",null,"Now we can create ",(0,o.kt)("inlineCode",{parentName:"p"},"flags")," to pass more arguments to any command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"node intro --user \"pranab das\" --greeting hello\n\n[\n  '/usr/local/bin/node',\n  '/Users/Pranab/Documents/github/js-learning/src/node/intro',\n  '--user',\n  'pranab das',\n  '--greeting',\n  'hello'\n]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const grab = flag => {\n    let indexAfterFlag = process.argv.indexOf(flag) + 1;\n    return process.argv[indexAfterFlag];\n}\n\nconst greeting = grab("--greeting");\nconst user = grab("--user");\n\nconsole.log(greeting, user);\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'node intro --user "pranab das" --greeting hello\n\nhello pranab das\n')))}g.isMDXComponent=!0}}]);