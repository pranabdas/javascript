"use strict";(self.webpackChunkjavascript=self.webpackChunkjavascript||[]).push([[865],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return b}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),b=r,d=m["".concat(s,".").concat(b)]||m[b]||p[b]||o;return t?a.createElement(d,i(i({ref:n},u),{},{components:t})):a.createElement(d,i({ref:n},u))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4420:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],l={title:"Variables"},s=void 0,c={unversionedId:"basics/variables",id:"basics/variables",title:"Variables",description:"In javascript we define a variable with var. Once you define a variable, we",source:"@site/docs/basics/variables.md",sourceDirName:"basics",slug:"/basics/variables",permalink:"/javascript/basics/variables",draft:!1,editUrl:"https://github.com/pranabdas/javascript/blob/main/docs/basics/variables.md",tags:[],version:"current",frontMatter:{title:"Variables"},sidebar:"docs",previous:{title:"Setup",permalink:"/javascript/basics/setup"},next:{title:"Conditional Statement",permalink:"/javascript/basics/conditional-statement"}},u={},p=[{value:"Common arithmetic operations",id:"common-arithmetic-operations",level:3},{value:"Some shorthand notations",id:"some-shorthand-notations",level:3},{value:"String concatenation",id:"string-concatenation",level:3}],m={toc:p};function b(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In javascript we define a variable with ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),". Once you define a variable, we\ncan initialize it. We do not need to explicitly declare the data type (like\nwhether integer, float or string). The data type is determined when you assign a\nvalue. We can check the datatype following way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"> var pi = 3.14;\n  console.log(typeof pi)\n\nnumber\n")),(0,o.kt)("h3",{id:"common-arithmetic-operations"},"Common arithmetic operations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var a = 5;\nvar b = 7;\nvar sum = 5 + 7;\nconsole.log(sum)\n\n12\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var a = 3;\nvar b = 9;\nvar c = 6;\nvar result = a + b*c\nconsole.log(result)\n\n57\n")),(0,o.kt)("h3",{id:"some-shorthand-notations"},"Some shorthand notations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"a = a + 4;\na += 4;\n")),(0,o.kt)("p",null,"The above works with ",(0,o.kt)("inlineCode",{parentName:"p"},"+, -, *, /")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"a = a + 1;\na++;\n\na = a -1;\na--;\n")),(0,o.kt)("h3",{id:"string-concatenation"},"String concatenation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var greeting = "Hello ";\nvar name = "Pranab";\n\nconsole.log(greeting + name)\n\nHello Pranab\n')),(0,o.kt)("p",null,"Be careful to check the data type while using operators. Notice the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var a = "4"; // this a string\nvar b = 5;\n\nvar sum = a + b;\nvar sub = a - b;\nvar mult = a * b;\n\nconsole.log("sum = " + sum + ", sub =" + sub + ", mult =" + mult)\n\nsum = 45, sub =-1, mult =20\n')),(0,o.kt)("p",null,"Notice the string concatenation in case of addition, however subtraction and\nmultiplication carried out properly even though ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," was a string. Obviously, it\nworks only when the string contains only numbers."),(0,o.kt)("p",null,"Please also see ",(0,o.kt)("a",{parentName:"p",href:"/functions-objects/variable-scope"},"Variable scope"),"."))}b.isMDXComponent=!0}}]);